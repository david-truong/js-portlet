/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.js.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.js.model.JSEntry;
import com.liferay.portlet.js.model.JSEntryModel;
import com.liferay.portlet.js.model.JSEntrySoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the JSEntry service. Represents a row in the &quot;JS_JSEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.js.model.JSEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JSEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JSEntryImpl
 * @see com.liferay.portlet.js.model.JSEntry
 * @see com.liferay.portlet.js.model.JSEntryModel
 * @generated
 */
public class JSEntryModelImpl extends BaseModelImpl<JSEntry>
	implements JSEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a j s entry model instance should use the {@link com.liferay.portlet.js.model.JSEntry} interface instead.
	 */
	public static final String TABLE_NAME = "JS_JSEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", new Integer(Types.VARCHAR) },
			{ "jsEntryId", new Integer(Types.BIGINT) },
			{ "createDate", new Integer(Types.TIMESTAMP) },
			{ "modifiedDate", new Integer(Types.TIMESTAMP) },
			{ "js", new Integer(Types.CLOB) },
			{ "classNameId", new Integer(Types.BIGINT) },
			{ "classPK", new Integer(Types.BIGINT) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "version", new Integer(Types.DOUBLE) },
			{ "status", new Integer(Types.INTEGER) },
			{ "statusDate", new Integer(Types.TIMESTAMP) }
		};
	public static final String TABLE_SQL_CREATE = "create table JS_JSEntry (uuid_ VARCHAR(75) null,jsEntryId LONG not null primary key,createDate DATE null,modifiedDate DATE null,js TEXT null,classNameId LONG,classPK LONG,groupId LONG,version DOUBLE,status INTEGER,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table JS_JSEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY jsEntry.classNameId DESC, jsEntry.classPK DESC, jsEntry.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY JS_JSEntry.classNameId DESC, JS_JSEntry.classPK DESC, JS_JSEntry.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.js.model.JSEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.js.model.JSEntry"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static JSEntry toModel(JSEntrySoap soapModel) {
		JSEntry model = new JSEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setJsEntryId(soapModel.getJsEntryId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setJs(soapModel.getJs());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setGroupId(soapModel.getGroupId());
		model.setVersion(soapModel.getVersion());
		model.setStatus(soapModel.getStatus());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<JSEntry> toModels(JSEntrySoap[] soapModels) {
		List<JSEntry> models = new ArrayList<JSEntry>(soapModels.length);

		for (JSEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.portlet.js.model.JSEntry"));

	public JSEntryModelImpl() {
	}

	public long getPrimaryKey() {
		return _jsEntryId;
	}

	public void setPrimaryKey(long pk) {
		setJsEntryId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_jsEntryId);
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		_uuid = uuid;

		if (_originalUuid == null) {
			_originalUuid = uuid;
		}
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getJsEntryId() {
		return _jsEntryId;
	}

	public void setJsEntryId(long jsEntryId) {
		_jsEntryId = jsEntryId;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getJs() {
		if (_js == null) {
			return StringPool.BLANK;
		}
		else {
			return _js;
		}
	}

	public void setJs(String js) {
		_js = js;
	}

	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	public long getClassNameId() {
		return _classNameId;
	}

	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = classNameId;
		}
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	public long getClassPK() {
		return _classPK;
	}

	public void setClassPK(long classPK) {
		_classPK = classPK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = classPK;
		}
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = groupId;
		}
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public double getVersion() {
		return _version;
	}

	public void setVersion(double version) {
		_version = version;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = version;
		}
	}

	public double getOriginalVersion() {
		return _originalVersion;
	}

	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	public JSEntry toEscapedModel() {
		if (isEscapedModel()) {
			return (JSEntry)this;
		}
		else {
			return (JSEntry)Proxy.newProxyInstance(JSEntry.class.getClassLoader(),
				new Class[] { JSEntry.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					JSEntry.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		JSEntryImpl clone = new JSEntryImpl();

		clone.setUuid(getUuid());
		clone.setJsEntryId(getJsEntryId());
		clone.setCreateDate(getCreateDate());
		clone.setModifiedDate(getModifiedDate());
		clone.setJs(getJs());
		clone.setClassNameId(getClassNameId());
		clone.setClassPK(getClassPK());
		clone.setGroupId(getGroupId());
		clone.setVersion(getVersion());
		clone.setStatus(getStatus());
		clone.setStatusDate(getStatusDate());

		return clone;
	}

	public int compareTo(JSEntry jsEntry) {
		int value = 0;

		if (getClassNameId() < jsEntry.getClassNameId()) {
			value = -1;
		}
		else if (getClassNameId() > jsEntry.getClassNameId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		if (getClassPK() < jsEntry.getClassPK()) {
			value = -1;
		}
		else if (getClassPK() > jsEntry.getClassPK()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		if (getVersion() < jsEntry.getVersion()) {
			value = -1;
		}
		else if (getVersion() > jsEntry.getVersion()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		JSEntry jsEntry = null;

		try {
			jsEntry = (JSEntry)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = jsEntry.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", jsEntryId=");
		sb.append(getJsEntryId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", js=");
		sb.append(getJs());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portlet.js.model.JSEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsEntryId</column-name><column-value><![CDATA[");
		sb.append(getJsEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>js</column-name><column-value><![CDATA[");
		sb.append(getJs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _uuid;
	private String _originalUuid;
	private long _jsEntryId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _js;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private double _version;
	private double _originalVersion;
	private boolean _setOriginalVersion;
	private int _status;
	private Date _statusDate;
	private transient ExpandoBridge _expandoBridge;
}